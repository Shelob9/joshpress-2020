{"type_of":"article","id":231482,"title":"Returning A Promise From A Function Is Extra Useful With TypeScript","description":"I published a post recently about returning promises from JavaScript functions. The example code was...","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--9J45Ttcr--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--yv0vKawD--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/xmijhis1yb58gc33udrm.jpg","readable_publish_date":"Jan 10","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--bBwtf391--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--yv0vKawD--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/xmijhis1yb58gc33udrm.jpg","slug":"returning-a-promise-from-a-function-is-extra-useful-with-typescript-ii6","path":"/saturday-drive/returning-a-promise-from-a-function-is-extra-useful-with-typescript-ii6","url":"https://dev.to/saturday-drive/returning-a-promise-from-a-function-is-extra-useful-with-typescript-ii6","canonical_url":"https://dev.to/saturday-drive/returning-a-promise-from-a-function-is-extra-useful-with-typescript-ii6","comments_count":4,"positive_reactions_count":8,"collection_id":null,"created_at":"2020-01-03T23:28:08Z","edited_at":"2020-01-31T23:00:06Z","crossposted_at":null,"published_at":"2020-01-10T00:07:41Z","last_comment_at":"2020-01-10T18:45:35Z","published_timestamp":"2020-01-10T00:07:41Z","tag_list":"javascript, typescript, wordpress, react","tags":["javascript","typescript","wordpress","react"],"body_html":"<p>I <a href=\"https://dev.to/shelob9/returning-a-promise-from-a-javascript-function-is-useful-569b\">published a post recently</a> about returning promises from JavaScript functions. The example code was simplified from a side project I'm working on. That project's main goal is to help me learn more TypeScript. But I'm also experimenting with using WordPress and React as a static site generator. In that project, I'm experimenting with different ways to abstract data fetching from server and client rendering as well as saving data to static files. </p>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/shelob9\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hHZ17fa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BhGNnnRD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg\" alt=\"shelob9 image\" loading=\"lazy\">\n    </div>\n  </a>\n  <a href=\"/shelob9/returning-a-promise-from-a-javascript-function-is-useful-569b\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Returning A Promise From A JavaScript Function Is Useful</h2>\n      <h3>Josh Pollock ãƒ» Jan  7 ãƒ» 3 min read</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#javascript</span>\n        <span class=\"ltag__link__tag\">#wordpress</span>\n        <span class=\"ltag__link__tag\">#react</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n<p>In this post, I'm going to show some examples from that project that show the utility of returning promise options from JavaScript functions and how much more useful it is with TypeScript.</p>\n\n<p>I am assuming that you're already familiar with TypeScript. While none of this is actually about WordPress, the data I'm fetching comes from the WordPress REST API. I wrote <a href=\"https://pantheon.io/blog/typescript-wordpress-basics\">a post about TypeScript basics using the WordPress REST API</a>, which might help.</p>\n\n<h2>\n  <a name=\"adding-types-to-promises\" href=\"#adding-types-to-promises\" class=\"anchor\">\n  </a>\n  Adding Types To Promises\n</h2>\n\n<p>Here is a JavaScript function from my last post about promises:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"k\">async</span> <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span><span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">){</span>\n    <span class=\"c1\">// Get posts</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">posts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span> <span class=\"s2\">`https://site.com/wp-json/wp/v2/posts?page=</span><span class=\"p\">${</span><span class=\"nx\">page</span><span class=\"p\">}</span><span class=\"s2\">`</span> <span class=\"p\">)</span>\n    <span class=\"c1\">//Then parse</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span> <span class=\"nx\">r</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()</span> <span class=\"p\">);</span>\n    <span class=\"c1\">// Then return object</span>\n    <span class=\"k\">return</span> <span class=\"nx\">posts</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>This returns an array of posts. That's cool, but the IDE and the babel compiler don't know that. I, as someone using this function in another file, may not know what it returns. TypeScript helps make it really explicit what that <em>type</em> of promise is being returned.</p>\n\n<p>That example was simplified from this function in my project:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">fetchPosts</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">(</span>\n    <span class=\"nx\">endpoint</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span>\n    <span class=\"nx\">page</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">postType</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">posts</span><span class=\"dl\">\"</span>\n<span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">WpApiPost</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">endpoint</span><span class=\"p\">}</span><span class=\"s2\">/wp/v2/</span><span class=\"p\">${</span><span class=\"nx\">postType</span><span class=\"p\">}</span><span class=\"s2\">?page=</span><span class=\"p\">${</span><span class=\"nx\">page</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">r</span> <span class=\"o\">=&gt;</span>\n        <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n\n\n\n<p>This one is a little more complete. It uses arguments for page and post type, as well as the URL for the API. In my actual code, I added a line with <code>//@ts-ignore</code> inside the closure as Jest was raising a TypeScript error that the URL was not absolute, even though the string literal does create a valid, absolute URL. Please comment if you know a better solution, I'm at ðŸ¤·.</p>\n\n<p>The key part of this is the return type <code>Promise&lt;Array&lt;WpApiPost&gt;&gt;</code>. This type has three parts. The first part <code>Promise</code> tells us the at the function returns a promise, which TypeScript's compiler would have figured out on it's own. The second part tells us that this promise resolves an array. The third part shows us this array is a collection of objects of the <code>WpApiPost</code>.</p>\n\n<h3>\n  <a name=\"why-this-is-useful\" href=\"#why-this-is-useful\" class=\"anchor\">\n  </a>\n  Why This Is Useful\n</h3>\n\n<p>Now I can think of this function, when I'm consuming it as a black-box. I know what goes in and what comes out and I don't care what is inside... as long as its tests pass.</p>\n\n<p>Consuming this function is now a lot simpler. In strict mode, I have to tell the callback for this promise what to expect. For example, in a React component:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight tsx\"><code><span class=\"c1\">//Type the posts variable and argument for setPosts to a collection of WpApiPost</span>\n<span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">posts</span><span class=\"p\">,</span> <span class=\"nx\">setPosts</span> <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">WpApiPost</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span>\n\n<span class=\"c1\">//Query for posts</span>\n<span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useEffect</span><span class=\"p\">(</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//fetch posts</span>\n    <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">endpoint</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">page</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">postType</span> <span class=\"p\">)</span>\n    <span class=\"c1\">// Type return of promise to match fetchPosts and setPosts common types.</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span> <span class=\"p\">(</span> <span class=\"na\">r</span> <span class=\"p\">:</span> <span class=\"p\">&lt;</span><span class=\"nc\">Array</span><span class=\"err\">&lt;</span><span class=\"nc\">WpApiPost</span><span class=\"p\">&gt;</span><span class=\"err\">&gt;</span> ) =<span class=\"err\">&gt;</span> setPosts(r) );\n}, [ props.endpoint, props.page, props.postType, setPosts ] );\n</code></pre></div>\n\n\n\n<p>This shows how to add TypeScript typings to <code>React.setState()</code>. We do a similar typing with array.map, when iterating over this array with React, when rendering:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight tsx\"><code><span class=\"p\">{</span><span class=\"nx\">posts</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nx\">post</span><span class=\"p\">:</span> <span class=\"nx\">WpApiPost</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&lt;</span><span class=\"nc\">Post</span> <span class=\"na\">key=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span> <span class=\"na\">post=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span> <span class=\"p\">)}</span>\n</code></pre></div>\n\n\n\n<h2>\n  <a name=\"i-promise-this-is-super-useful\" href=\"#i-promise-this-is-super-useful\" class=\"anchor\">\n  </a>\n  I Promise This Is Super Useful\n</h2>\n\n<p>In this post, I rewrote one of the examples from my <a href=\"https://dev.to/shelob9/returning-a-promise-from-a-javascript-function-is-useful-569b\">last dev.to post</a> but showed how returning a promise from a function is even more useful with TypeScript. No surprise, TypeScript is great.</p>\n\n<p>Encapsulating API fetch logic inside of a function is helpful, but it can make it harder to work with the results. Using TypeScript makes it clear what the resulting data will be, and how to use it, when the promise is resolved.</p>\n\n<blockquote>\n<p><a href=\"https://twitter.com/josh412\">Thanks for reading, follow me on Twitter @Josh412</a></p>\n</blockquote>\n\n<p><em>Featured Image: Photo by <a href=\"https://unsplash.com/@davidmarcu?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">David Marcu</a> on Unsplash.</em></p>\n\n","body_markdown":"\nI [published a post recently](https://dev.to/shelob9/returning-a-promise-from-a-javascript-function-is-useful-569b) about returning promises from JavaScript functions. The example code was simplified from a side project I'm working on. That project's main goal is to help me learn more TypeScript. But I'm also experimenting with using WordPress and React as a static site generator. In that project, I'm experimenting with different ways to abstract data fetching from server and client rendering as well as saving data to static files. \n\n{% link https://dev.to/shelob9/returning-a-promise-from-a-javascript-function-is-useful-569b %}\n\nIn this post, I'm going to show some examples from that project that show the utility of returning promise options from JavaScript functions and how much more useful it is with TypeScript.\n\nI am assuming that you're already familiar with TypeScript. While none of this is actually about WordPress, the data I'm fetching comes from the WordPress REST API. I wrote [a post about TypeScript basics using the WordPress REST API](https://pantheon.io/blog/typescript-wordpress-basics), which might help.\n\n\n## Adding Types To Promises\n\nHere is a JavaScript function from my last post about promises:\n\n```js\nfunction async fetchPosts(page = 1){\n    // Get posts\n    const posts = await fetch( `https://site.com/wp-json/wp/v2/posts?page=${page}` )\n    //Then parse\n    .then( r => r.json() );\n    // Then return object\n    return posts;\n}\n```\n\nThis returns an array of posts. That's cool, but the IDE and the babel compiler don't know that. I, as someone using this function in another file, may not know what it returns. TypeScript helps make it really explicit what that *type* of promise is being returned.\n\nThat example was simplified from this function in my project:\n\n```ts\nconst fetchPosts = async (\n    endpoint: string,\n    page: number = 1,\n    postType: string = \"posts\"\n): Promise<Array<WpApiPost>> => {\n    return fetch(`${endpoint}/wp/v2/${postType}?page=${page}`).then(r =>\n        r.json()\n    );\n};\n```\n\nThis one is a little more complete. It uses arguments for page and post type, as well as the URL for the API. In my actual code, I added a line with `//@ts-ignore` inside the closure as Jest was raising a TypeScript error that the URL was not absolute, even though the string literal does create a valid, absolute URL. Please comment if you know a better solution, I'm at ðŸ¤·.\n\nThe key part of this is the return type `Promise<Array<WpApiPost>>`. This type has three parts. The first part `Promise` tells us the at the function returns a promise, which TypeScript's compiler would have figured out on it's own. The second part tells us that this promise resolves an array. The third part shows us this array is a collection of objects of the `WpApiPost`.\n\n### Why This Is Useful\n\nNow I can think of this function, when I'm consuming it as a black-box. I know what goes in and what comes out and I don't care what is inside... as long as its tests pass.\n\nConsuming this function is now a lot simpler. In strict mode, I have to tell the callback for this promise what to expect. For example, in a React component:\n\n```tsx\n//Type the posts variable and argument for setPosts to a collection of WpApiPost\nconst [posts, setPosts ] = React.useState<Array<WpApiPost>>();\n\n//Query for posts\nReact.useEffect( () => {\n    //fetch posts\n    fetchPosts( props.endpoint, props.page, props.postType )\n    // Type return of promise to match fetchPosts and setPosts common types.\n    .then( ( r : <Array<WpApiPost>> ) => setPosts(r) );\n}, [ props.endpoint, props.page, props.postType, setPosts ] );\n```\n\nThis shows how to add TypeScript typings to `React.setState()`. We do a similar typing with array.map, when iterating over this array with React, when rendering:\n\n```tsx\n{posts.map( (post: WpApiPost) => <Post key={post.id} post={post} /> )}\n```\n\n## I Promise This Is Super Useful\n\nIn this post, I rewrote one of the examples from my [last dev.to post](https://dev.to/shelob9/returning-a-promise-from-a-javascript-function-is-useful-569b) but showed how returning a promise from a function is even more useful with TypeScript. No surprise, TypeScript is great.\n\nEncapsulating API fetch logic inside of a function is helpful, but it can make it harder to work with the results. Using TypeScript makes it clear what the resulting data will be, and how to use it, when the promise is resolved.\n\n\n> [Thanks for reading, follow me on Twitter @Josh412](https://twitter.com/josh412)\n\n\n*Featured Image: Photo by [David Marcu](https://unsplash.com/@davidmarcu?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on Unsplash.*\n","user":{"name":"Josh Pollock","username":"shelob9","twitter_username":"Josh412","github_username":"Shelob9","website_url":"https://JoshPress.net","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--0WBb8dNZ--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--8WFtOwoJ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg"},"organization":{"name":"Saturday Drive","username":"saturday-drive","slug":"saturday-drive","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--tbPWzF1m--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1799/e3556db4-790a-4bee-9cd0-5ab5cefec686.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--0cKDcR6A--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1799/e3556db4-790a-4bee-9cd0-5ab5cefec686.png"}}