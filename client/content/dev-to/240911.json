{"type_of":"article","id":240911,"title":"Why I Use Yarn, Not npm","description":"","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--VGNGZw6f--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--J1JPtEEK--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/u9fv7o19ge7ojzclrmpi.jpg","readable_publish_date":"Jan 18","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--vhD7OfF9--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--J1JPtEEK--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/u9fv7o19ge7ojzclrmpi.jpg","slug":"why-i-use-yarn-not-npm-dkk","path":"/shelob9/why-i-use-yarn-not-npm-dkk","url":"https://dev.to/shelob9/why-i-use-yarn-not-npm-dkk","canonical_url":"https://dev.to/shelob9/why-i-use-yarn-not-npm-dkk","comments_count":15,"positive_reactions_count":133,"collection_id":null,"created_at":"2020-01-18T14:32:52Z","edited_at":"2020-01-25T00:22:25Z","crossposted_at":null,"published_at":"2020-01-18T16:16:48Z","last_comment_at":"2020-01-20T13:25:03Z","published_timestamp":"2020-01-18T16:16:48Z","tag_list":"javascript, npm, node","tags":["javascript","npm","node"],"body_html":"<p><em>Update: This post is based on using Yarn 1. A major update <a href=\"https://dev.to/arcanis/introducing-yarn-2-4eh1\">Yarn 2</a></em></p>\n\n<p>In the comments of <a href=\"https://dev.to/shelob9/a-few-things-i-do-every-time-i-start-a-new-gatsby-site-5gd\">my post about things I do everytime I start a Gatsby site</a>, <a href=\"https://dev.to/wezpyke/comment/kdd8\">there was a really good comment</a> asking why I switch the scripts from npm to Yarn. Great question, different topic, so I wrote this post to share a few reasons I switched.</p>\n\n<p>Historically, the npm CLI is the most common tool for managing dependencies and scripting in a node project. But, there are other CLIs that expect the same package.json schema, for example <a href=\"https://yarnpkg.com/lang/en/docs/install/#windows-stable\">Yarn</a> or <a href=\"https://pnpm.js.org/\">pnpm</a>.</p>\n\n<h2>\n  <a name=\"three-reasons-i-like-yarn-more-than-npm\" href=\"#three-reasons-i-like-yarn-more-than-npm\" class=\"anchor\">\n  </a>\n  Three Reasons I Like Yarn More Than npm\n</h2>\n\n<p>Before I get to the advantages to my workflow, I have to say part of this is beacuse of the <a href=\"https://www.npmjs.com/about\">company npm</a>. Last year they braught in a new CEO and <a href=\"https://www.theregister.co.uk/2019/04/01/npm_layoff_staff/\">laid off a several long-term employees to stop union organizing</a>, which is gross. I'm not going to recount the whole story, but it doesn't make me feal great about a key component of the JavaScript ecosystem.</p>\n\n<p>But, I think it's important to support alternative package managers like Yarn. Yarn and npm default to npm's registry, but also support alternative package registries. I think these problems will be solved with more decentralized registries and multiple CLIs like Yarn.</p>\n\n<p>Anyway, that aside, I think Yarn is very good software for a few reasons.</p>\n\n<h3>\n  <a name=\"run-scripts-slightly-easier\" href=\"#run-scripts-slightly-easier\" class=\"anchor\">\n  </a>\n  Run Scripts Slightly Easier\n</h3>\n\n<p>Honestly, this was the first reason I started using Yarn. If package.json has a registered script called \"build\" you can run it with npm like this:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>npm run build\n</code></pre></div>\n\n\n\n<p>Or with Yarn:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>yarn build\n</code></pre></div>\n\n\n\n<p>Small difference, but I think the time savings adds up. Simpler is better.</p>\n\n<h3>\n  <a name=\"upgrade-interactive\" href=\"#upgrade-interactive\" class=\"anchor\">\n  </a>\n  Upgrade Interactive\n</h3>\n\n<p>Got a project that is pinned to a bunch of out of date dependencies? While have I got the CLI command for you. Yarn's <a href=\"https://yarnpkg.com/lang/en/docs/cli/upgrade-interactive/\">upgrade-interactive</a> is the hottest command in automated upgrades.</p>\n\n<p>To upgrade one, some or all of your dependencies to the latest version.To bring up a set of prompts to determine which dependencies to upgrade, just type:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>yarn upgrade-interactive <span class=\"nt\">--latest</span>\n</code></pre></div>\n\n\n\n<p>Make your selections and watch it install. </p>\n\n<h3>\n  <a name=\"workspaces\" href=\"#workspaces\" class=\"anchor\">\n  </a>\n  Workspaces\n</h3>\n\n<p>Monorepos allow you to develop multiple packages in one git repo. If the packages are related or fairly interdependent, this can speed up development. Depending on the needs, I like to do this with <a href=\"https://yarnpkg.com/lang/en/docs/workspaces/\">Yarn workspaces</a> or Yarn workspaces and <a href=\"\">Lerna</a>.</p>\n\n<p>A yarn workspace is a folder in your package with its own package.json. you can use the <a href=\"https://yarnpkg.com/lang/en/docs/cli/workspace/\">workspace</a> command to run a script</p>\n\n<h2>\n  <a name=\"yarn-is-good\" href=\"#yarn-is-good\" class=\"anchor\">\n  </a>\n  Yarn Is Good\n</h2>\n\n<p>I've experienced less frustration with dependency resolution, and other errors since switching to Yarn. Also, it makes working with monorepos easier, for me.</p>\n\n<p>Have you switched? If so, did you have a different reason? Disagree? Comments section is below ðŸ‘‡ or <a href=\"https://twitter.com/josh412\">@ me on Twitter</a>.</p>\n\n","body_markdown":"*Update: This post is based on using Yarn 1. A major update [Yarn 2](https://dev.to/arcanis/introducing-yarn-2-4eh1)*\n\nIn the comments of [my post about things I do everytime I start a Gatsby site](https://dev.to/shelob9/a-few-things-i-do-every-time-i-start-a-new-gatsby-site-5gd), [there was a really good comment](https://dev.to/wezpyke/comment/kdd8) asking why I switch the scripts from npm to Yarn. Great question, different topic, so I wrote this post to share a few reasons I switched.\n\nHistorically, the npm CLI is the most common tool for managing dependencies and scripting in a node project. But, there are other CLIs that expect the same package.json schema, for example [Yarn](https://yarnpkg.com/lang/en/docs/install/#windows-stable) or [pnpm](https://pnpm.js.org/).\n\n\n## Three Reasons I Like Yarn More Than npm\n\n\nBefore I get to the advantages to my workflow, I have to say part of this is beacuse of the [company npm](https://www.npmjs.com/about). Last year they braught in a new CEO and [laid off a several long-term employees to stop union organizing](https://www.theregister.co.uk/2019/04/01/npm_layoff_staff/), which is gross. I'm not going to recount the whole story, but it doesn't make me feal great about a key component of the JavaScript ecosystem.\n\nBut, I think it's important to support alternative package managers like Yarn. Yarn and npm default to npm's registry, but also support alternative package registries. I think these problems will be solved with more decentralized registries and multiple CLIs like Yarn.\n\nAnyway, that aside, I think Yarn is very good software for a few reasons.\n\n### Run Scripts Slightly Easier\n\nHonestly, this was the first reason I started using Yarn. If package.json has a registered script called \"build\" you can run it with npm like this:\n\n```bash\nnpm run build\n```\n\nOr with Yarn:\n\n```bash\nyarn build\n```\n\nSmall difference, but I think the time savings adds up. Simpler is better.\n\n### Upgrade Interactive\n\nGot a project that is pinned to a bunch of out of date dependencies? While have I got the CLI command for you. Yarn's [upgrade-interactive](\nhttps://yarnpkg.com/lang/en/docs/cli/upgrade-interactive/) is the hottest command in automated upgrades.\n\nTo upgrade one, some or all of your dependencies to the latest version.To bring up a set of prompts to determine which dependencies to upgrade, just type:\n\n```bash\nyarn upgrade-interactive --latest\n```\n\nMake your selections and watch it install. \n\n### Workspaces\n\nMonorepos allow you to develop multiple packages in one git repo. If the packages are related or fairly interdependent, this can speed up development. Depending on the needs, I like to do this with [Yarn workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) or Yarn workspaces and [Lerna]().\n\nA yarn workspace is a folder in your package with its own package.json. you can use the [workspace](https://yarnpkg.com/lang/en/docs/cli/workspace/) command to run a script\n\n\n## Yarn Is Good\n\nI've experienced less frustration with dependency resolution, and other errors since switching to Yarn. Also, it makes working with monorepos easier, for me.\n\nHave you switched? If so, did you have a different reason? Disagree? Comments section is below ðŸ‘‡ or [@ me on Twitter](https://twitter.com/josh412).\n\n","user":{"name":"Josh Pollock","username":"shelob9","twitter_username":"Josh412","github_username":"Shelob9","website_url":"https://JoshPress.net","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--0WBb8dNZ--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--8WFtOwoJ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg"}}