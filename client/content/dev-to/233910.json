{"type_of":"article","id":233910,"title":"Gitlab CI For A TypeScript Project Bootstrapped With TSDX","description":"","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--iQFdToqu--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--2EfwPSfI--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/9q92slvjyq73phv9rtem.jpg","readable_publish_date":"Jan 22","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--UMbpxsMU--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--2EfwPSfI--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/9q92slvjyq73phv9rtem.jpg","slug":"gitlab-ci-for-a-typescript-project-bootstrapped-with-tsdx-4nle","path":"/shelob9/gitlab-ci-for-a-typescript-project-bootstrapped-with-tsdx-4nle","url":"https://dev.to/shelob9/gitlab-ci-for-a-typescript-project-bootstrapped-with-tsdx-4nle","canonical_url":"https://dev.to/shelob9/gitlab-ci-for-a-typescript-project-bootstrapped-with-tsdx-4nle","comments_count":0,"positive_reactions_count":7,"collection_id":null,"created_at":"2020-01-07T15:16:39Z","edited_at":null,"crossposted_at":null,"published_at":"2020-01-22T23:36:33Z","last_comment_at":"2020-01-22T23:36:33Z","published_timestamp":"2020-01-22T23:36:33Z","tag_list":"typescript, javascript, gitlab, testing","tags":["typescript","javascript","gitlab","testing"],"body_html":"<p>Since I started working at <a href=\"https://saturdaydrive.com\">Saturday Drive</a> I've spent a lot of time learning about CI/CD using self-hosted Gitlab. Sometimes these projects can be huge rabbit holes. It's nice when they are easy. I will write some more posts from what I learned from adventures, but let's start with an easier one: TypeScript.</p>\n\n<p>I start most TypeScript projects using a zero config tool called <a href=\"https://github.com/jaredpalmer/tsdx\">tsdx</a> by Jared Palmer. With tsdx, you get everything you need to start a TypeScript or React + TypeScript project: the compiler configured, a watcher for development, testing with Jest, and a build script. There is even an option <a href=\"https://storybook.js.org/\">to add Storybook</a>. </p>\n\n<p>In this post, I'll show you how to add test automation. In the next post, I'll show how to add deployment of a documentation site and publishing to the npm registry. The example code is based on a project that runs in self-hosted Gitlab, but should work with <a href=\"https://gitlab.com\">Gitlab.com</a>.</p>\n\n<h2>\n  <a name=\"adding-gitlab-ci-cd-to-tsdx\" href=\"#adding-gitlab-ci-cd-to-tsdx\" class=\"anchor\">\n  </a>\n  Adding Gitlab CI/ CD To tsdx\n</h2>\n\n<p>Before adding CI/ CD to the project, you need a project to work with. Creating one with tsdx takes one line:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>npx tsdx create project-name\n</code></pre></div>\n\n\n\n<p>You will be asked what template to use, chose which ever one meets your needs.</p>\n\n<p>Once this installs, you will need to a <code>.gitlab-ci.yml</code> file. Here is a basic one that runs the tests for the TypeScript project bootstrapped with tsdx:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight yaml\"><code><span class=\"c1\"># Test with latest node version</span>\n<span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">node:latest</span>\n\n<span class=\"c1\"># Cache dependencies</span>\n<span class=\"na\">cache</span><span class=\"pi\">:</span>\n  <span class=\"na\">paths</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">node_modules/</span>\n\n<span class=\"c1\"># Run unit tests</span>\n<span class=\"na\">test</span><span class=\"pi\">:</span>\n  <span class=\"na\">script</span><span class=\"pi\">:</span>\n    <span class=\"c1\"># Install</span>\n    <span class=\"pi\">-</span> <span class=\"s\">yarn</span>\n    <span class=\"c1\"># Run Jest in CI mode</span>\n    <span class=\"pi\">-</span> <span class=\"s\">yarn test --ci</span>\n\n</code></pre></div>\n\n\n\n<p>This is a one stage, one job pipeline that uses <a href=\"https://jestjs.io/docs/en/cli#--ci\">Jest's --ci</a> flag to run the tests once. It also means it will fail if any snapshots do not match.</p>\n\n<p>Push that to Gitlab, and then go to the \"Pipelines\" screen under the \"CI/CD\" menu of your repo to see if it worked. Now along with, test-driven development and  <a href=\"https://datasift.github.io/gitflow/IntroducingGitFlow.html\">gitflow</a> you can use Gitlab for continuous integration -- the CI in CI/CD -- of your changes. Gitlab has a \"merge when pipeline passes\" option you can check in merge requests.</p>\n\n<p>Using TypesScript means that the command <code>yarn test --ci</code> is not just running automated tests. It's actually compile time static analysis and then testing. TypeScript compiler errors have to be fixed or the pipeline fails.</p>\n\n<h2>\n  <a name=\"deploying-comes-next\" href=\"#deploying-comes-next\" class=\"anchor\">\n  </a>\n  Deploying Comes Next\n</h2>\n\n<p>This is a short post about adding testing.</p>\n\n<p>The second half of CI/ CD is continuous deployment. Whenever we merge to master, we want a deployment, whatever that means to run automatically. In this case, I'm developing a resuable software package. So I have to deploy a documentation site and deploy to a package registry such as NPM.</p>\n\n<p>I'll be writing that post, more about Gitlab CI and TypeScript, <a href=\"https://dev.to/shelob9\">follow me to be notified when those post become alive</a>.</p>\n\n<p><em>Featured Image by <a href=\"https://unsplash.com/@frankiefoto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">frank mckenna</a> on <a href=\"/s/photos/beach-sunrise?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></em></p>\n\n","body_markdown":"Since I started working at [Saturday Drive](https://saturdaydrive.com) I've spent a lot of time learning about CI/CD using self-hosted Gitlab. Sometimes these projects can be huge rabbit holes. It's nice when they are easy. I will write some more posts from what I learned from adventures, but let's start with an easier one: TypeScript.\n\nI start most TypeScript projects using a zero config tool called [tsdx](https://github.com/jaredpalmer/tsdx) by Jared Palmer. With tsdx, you get everything you need to start a TypeScript or React + TypeScript project: the compiler configured, a watcher for development, testing with Jest, and a build script. There is even an option [to add Storybook](https://storybook.js.org/). \n\nIn this post, I'll show you how to add test automation. In the next post, I'll show how to add deployment of a documentation site and publishing to the npm registry. The example code is based on a project that runs in self-hosted Gitlab, but should work with [Gitlab.com](https://gitlab.com).\n\n## Adding Gitlab CI/ CD To tsdx\n \nBefore adding CI/ CD to the project, you need a project to work with. Creating one with tsdx takes one line:\n\n```bash\nnpx tsdx create project-name\n```\n\nYou will be asked what template to use, chose which ever one meets your needs.\n\nOnce this installs, you will need to a `.gitlab-ci.yml` file. Here is a basic one that runs the tests for the TypeScript project bootstrapped with tsdx:\n\n```yml\n# Test with latest node version\nimage: node:latest\n\n# Cache dependencies\ncache:\n  paths:\n    - node_modules/\n\n# Run unit tests\ntest:\n  script:\n    # Install\n    - yarn\n    # Run Jest in CI mode\n    - yarn test --ci\n\n```\n\nThis is a one stage, one job pipeline that uses [Jest's --ci](https://jestjs.io/docs/en/cli#--ci) flag to run the tests once. It also means it will fail if any snapshots do not match.\n\nPush that to Gitlab, and then go to the \"Pipelines\" screen under the \"CI/CD\" menu of your repo to see if it worked. Now along with, test-driven development and  [gitflow](https://datasift.github.io/gitflow/IntroducingGitFlow.html) you can use Gitlab for continuous integration -- the CI in CI/CD -- of your changes. Gitlab has a \"merge when pipeline passes\" option you can check in merge requests.\n\nUsing TypesScript means that the command `yarn test --ci` is not just running automated tests. It's actually compile time static analysis and then testing. TypeScript compiler errors have to be fixed or the pipeline fails.\n\n## Deploying Comes Next\n\nThis is a short post about adding testing.\n\n The second half of CI/ CD is continuous deployment. Whenever we merge to master, we want a deployment, whatever that means to run automatically. In this case, I'm developing a resuable software package. So I have to deploy a documentation site and deploy to a package registry such as NPM.\n\nI'll be writing that post, more about Gitlab CI and TypeScript, [follow me to be notified when those post become alive](https://dev.to/shelob9).\n\n*Featured Image by <a href=\"https://unsplash.com/@frankiefoto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">frank mckenna</a> on <a href=\"/s/photos/beach-sunrise?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a>*","user":{"name":"Josh Pollock","username":"shelob9","twitter_username":"Josh412","github_username":"Shelob9","website_url":"https://JoshPress.net","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--0WBb8dNZ--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--8WFtOwoJ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg"}}