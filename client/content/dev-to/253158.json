{"type_of":"article","id":253158,"title":"Typed Properties In PHP Are Neato","description":"Until recently, for a PHP and JavaScript developer, avoiding bugs caused by variables being the wrong...","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--EkE_duZ9--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--C05K6Wc7--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/i/va3k4co2uzusjxip9dsw.jpg","readable_publish_date":"Feb  1","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--9_j58clK--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--C05K6Wc7--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/i/va3k4co2uzusjxip9dsw.jpg","slug":"typed-properties-in-php-are-neato-2aoh","path":"/shelob9/typed-properties-in-php-are-neato-2aoh","url":"https://dev.to/shelob9/typed-properties-in-php-are-neato-2aoh","canonical_url":"https://dev.to/shelob9/typed-properties-in-php-are-neato-2aoh","comments_count":1,"positive_reactions_count":10,"collection_id":null,"created_at":"2020-02-01T23:04:34Z","edited_at":"2020-02-02T00:42:06Z","crossposted_at":null,"published_at":"2020-02-01T23:17:15Z","last_comment_at":"2020-02-03T13:35:53Z","published_timestamp":"2020-02-01T23:17:15Z","tag_list":"php","tags":["php"],"body_html":"<p>Until recently, for a PHP and JavaScript developer, avoiding bugs caused by variables being the wrong type was difficult, beacuse the langues are not strongly-typed. Thanks to PHP7 and TypeScript, we can opt-in to more type safety, which I like.</p>\n\n<p>PHP7 added scalar type hinting to function parameters, as well as return types. This makes the getter and setter pattern very useful. By protecting a property and a protected property, we can prevent a property from being set to the wrong type -- from outside of the object's scope. This pattern looks like this:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"p\">{</span>\n    <span class=\"cd\">/** @var string */</span>\n    <span class=\"k\">protected</span> <span class=\"nv\">$firstName</span><span class=\"p\">;</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"nf\">getFirstName</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">firstName</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"nf\">setFirstName</span><span class=\"p\">(</span><span class=\"nx\">string</span> <span class=\"nv\">$firstName</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nx\">string</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">firstName</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nv\">$this</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>That's cool, and while it's a lot less boilerplate than it would be in PHP5, it's still a pretty complex way to implement a string property on an object. This class has two public methods that need test coverage, which adds up. </p>\n\n<p>Having a property that acts public, but also is constrained by type, is nice. I think the popularity of Laravel backs up this opinion. And yes, <a href=\"https://torquemag.io/2016/05/wordpress-developers-need-know-php-magic-methods/\">I can use magic methods</a> to make something like a Laravel model.</p>\n\n<p>Also, <a href=\"https://laravel-news.com/php7-typed-properties\">PHP 7.4 has typed properties</a> and they are neato.</p>\n\n<h2>\n  <a name=\"refactoring-php-with-typed-properties\" href=\"#refactoring-php-with-typed-properties\" class=\"anchor\">\n  </a>\n  Refactoring PHP With Typed Properties\n</h2>\n\n<p>So, I can now rewrite that class, with no methods:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nx\">string</span> <span class=\"nv\">$firstName</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>In addition to being less code, I don't need to write a test for this. However this class gets used in integration tests by other classes, my IDE and <a href=\"https://github.com/phpstan/phpstan\">a static analysis tool</a> all prevent it from being used wrong.</p>\n\n<p>In the first example, nothing stopped me from setting <code>$firstName</code> to an array from another method of this class. Now the program will not let me make that mistake. Machines are better at remembering stuff than me, so that's great.</p>\n\n<h2>\n  <a name=\"but-wait-there-is-a-catch\" href=\"#but-wait-there-is-a-catch\" class=\"anchor\">\n  </a>\n  But Wait. There Is A Catch!\n</h2>\n\n<p>One catch though, Ok, technically, it's a potential error that you can catch...</p>\n\n<p>You can not read a property before it is set for the first time:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"c1\">//This works</span>\n<span class=\"nv\">$user</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">User</span><span class=\"p\">();</span>\n<span class=\"nv\">$user</span><span class=\"o\">-&gt;</span><span class=\"na\">firstName</span> <span class=\"o\">=</span> <span class=\"s1\">'Roy'</span><span class=\"p\">;</span>\n<span class=\"k\">echo</span> <span class=\"nv\">$user</span><span class=\"o\">-&gt;</span><span class=\"na\">firstName</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//This throws an error</span>\n<span class=\"nv\">$user</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">User</span><span class=\"p\">();</span>\n<span class=\"k\">echo</span> <span class=\"nv\">$user</span><span class=\"o\">-&gt;</span><span class=\"na\">firstName</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n\n<p>This problem is also present in the older method. In both cases, a default value of the property could be set. Or I could just not use the property before setting. Depends on how the program is run. I don't like the possibility of the code being used wrong, beacuse lots of people I don't know run code I write.</p>\n\n<p>One solution is to hardcode the default value:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nx\">string</span> <span class=\"nv\">$firstName</span> <span class=\"o\">=</span> <span class=\"s1\">'Roy'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>That keeps the code minimal, which is nice. I do think writing the class so that the property HAS to be set on initialization is a good option as well:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"kd\">class</span> <span class=\"nc\">User</span> <span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"nx\">string</span> <span class=\"nv\">$firstName</span><span class=\"p\">;</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">function</span> <span class=\"nf\">__construct</span><span class=\"p\">(</span><span class=\"nx\">string</span> <span class=\"nv\">$firstName</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"nv\">$this</span><span class=\"o\">-&gt;</span><span class=\"na\">firstName</span> <span class=\"o\">=</span> <span class=\"nv\">$firstName</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n","body_markdown":"Until recently, for a PHP and JavaScript developer, avoiding bugs caused by variables being the wrong type was difficult, beacuse the langues are not strongly-typed. Thanks to PHP7 and TypeScript, we can opt-in to more type safety, which I like.\n\nPHP7 added scalar type hinting to function parameters, as well as return types. This makes the getter and setter pattern very useful. By protecting a property and a protected property, we can prevent a property from being set to the wrong type -- from outside of the object's scope. This pattern looks like this:\n\n```php\nclass User {\n\t/** @var string */\n\tprotected $firstName;\n\n\tpublic function getFirstName(): string {\n\t\treturn $this->firstName;\n\t}\n\tpublic function setFirstName(string $firstName) : string\n\t{\n\t\t$this->firstName;\n\t\treturn $this;\n\t}\n}\n```\n\nThat's cool, and while it's a lot less boilerplate than it would be in PHP5, it's still a pretty complex way to implement a string property on an object. This class has two public methods that need test coverage, which adds up. \n\nHaving a property that acts public, but also is constrained by type, is nice. I think the popularity of Laravel backs up this opinion. And yes, [I can use magic methods](https://torquemag.io/2016/05/wordpress-developers-need-know-php-magic-methods/) to make something like a Laravel model.\n\nAlso, [PHP 7.4 has typed properties](https://laravel-news.com/php7-typed-properties) and they are neato.\n\n## Refactoring PHP With Typed Properties\n\nSo, I can now rewrite that class, with no methods:\n\n```php\nclass User {\n\tpublic string $firstName;\n}\n```\n\nIn addition to being less code, I don't need to write a test for this. However this class gets used in integration tests by other classes, my IDE and [a static analysis tool](https://github.com/phpstan/phpstan) all prevent it from being used wrong.\n\nIn the first example, nothing stopped me from setting `$firstName` to an array from another method of this class. Now the program will not let me make that mistake. Machines are better at remembering stuff than me, so that's great.\n\n## But Wait. There Is A Catch!\n\nOne catch though, Ok, technically, it's a potential error that you can catch...\n\nYou can not read a property before it is set for the first time:\n\n```php\n//This works\n$user = new User();\n$user->firstName = 'Roy';\necho $user->firstName;\n\n//This throws an error\n$user = new User();\necho $user->firstName;\n```\n\nThis problem is also present in the older method. In both cases, a default value of the property could be set. Or I could just not use the property before setting. Depends on how the program is run. I don't like the possibility of the code being used wrong, beacuse lots of people I don't know run code I write.\n\nOne solution is to hardcode the default value:\n\n```php\nclass User {\n\tpublic string $firstName = 'Roy';\n}\n```\n\nThat keeps the code minimal, which is nice. I do think writing the class so that the property HAS to be set on initialization is a good option as well:\n\n```php\nclass User {\n\tpublic string $firstName;\n\n\tpublic function __construct(string $firstName)\n\t{\n\t\t$this->firstName = $firstName;\n\t}\n}\n```\n\n\n","user":{"name":"Josh Pollock","username":"shelob9","twitter_username":"Josh412","github_username":"Shelob9","website_url":"https://JoshPress.net","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--0WBb8dNZ--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--8WFtOwoJ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg"}}