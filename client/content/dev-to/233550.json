{"type_of":"article","id":233550,"title":"Returning A Promise From A JavaScript Function Is Useful","description":"One JavaScript feature that has tripped me up a bit recently is the difference between a function tha...","cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--1o_7ZSxd--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--0S8rYhYY--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/4fomgc5qd275plwnegum.jpg","readable_publish_date":"Jan  7","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--G35LdYfH--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://res.cloudinary.com/practicaldev/image/fetch/s--0S8rYhYY--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://thepracticaldev.s3.amazonaws.com/i/4fomgc5qd275plwnegum.jpg","slug":"returning-a-promise-from-a-javascript-function-is-useful-569b","path":"/saturday-drive/returning-a-promise-from-a-javascript-function-is-useful-569b","url":"https://dev.to/saturday-drive/returning-a-promise-from-a-javascript-function-is-useful-569b","canonical_url":"https://dev.to/saturday-drive/returning-a-promise-from-a-javascript-function-is-useful-569b","comments_count":0,"positive_reactions_count":9,"collection_id":null,"created_at":"2020-01-07T00:13:04Z","edited_at":"2020-01-31T23:03:50Z","crossposted_at":null,"published_at":"2020-01-07T22:03:52Z","last_comment_at":"2020-01-07T22:03:52Z","published_timestamp":"2020-01-07T22:03:52Z","tag_list":"javascript, wordpress, react","tags":["javascript","wordpress","react"],"body_html":"<p>One JavaScript feature that has tripped me up a bit recently is the difference between a function that returns a promise and a function that returns the value of that the promise resolves. Decoupling data fetching helps with server-side rendered apps and can also make mocking a remote API in tests easier. In my case, I wanted to use the same functions for getting data into a static file generator as I used in the React client.</p>\n\n<p>In the past, I always wanted to return the result of the API call. The more that I understand the subtle difference between returning a promise and returning the result of the the promise, the more I prefer to return a promise. In this post, I will show to return a promise from an asynchronous function, with and without explicitly creating a Promise object with the new keyword. More importantly, I'll cover when and why this pattern is useful when working with remote APIs.</p>\n\n<p>This is a quick post and I assume you are somewhat familiar with using async and await in JavaScript. I wrote in more detail about that <a href=\"https://joshpress.net/two-rules-of-javascript-async-await/\">here</a>.</p>\n\n<h2>\n  <a name=\"what-is-a-promise\" href=\"#what-is-a-promise\" class=\"anchor\">\n  </a>\n  What Is A Promise?\n</h2>\n\n<p>If you are not familiar with promises, I recommend reading <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">MDN</a> first. A useful definition for this article, would be to say it's a function that promises to do something and <strong>then</strong> let's you do something with it.</p>\n\n<p>The kinds of functions we're talking about are considered \"thenable\". We are able to call the function \"then()\" on there results.</p>\n\n<p>Fetch is an example of a \"thenable\". This example makes a remote HTTP request and then console.logs the response.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">r</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</code></pre></div>\n\n\n\n<h2>\n  <a name=\"returning-a-promise-from-a-function\" href=\"#returning-a-promise-from-a-function\" class=\"anchor\">\n  </a>\n  Returning A Promise From A Function\n</h2>\n\n<p>There are a few ways to return a promise from a function. One way is to use an async closure that returns a thenable function. This example gets a page of posts from a WordPress site:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code>\n<span class=\"kd\">function</span> <span class=\"k\">async</span> <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span><span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">){</span>\n    <span class=\"c1\">// Await fetch of posts</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">posts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span> <span class=\"s2\">`https://site.com/wp-json/wp/v2/posts?page=</span><span class=\"p\">${</span><span class=\"nx\">page</span><span class=\"p\">}</span><span class=\"s2\">`</span> <span class=\"p\">)</span>\n    <span class=\"c1\">// Return posts</span>\n    <span class=\"k\">return</span> <span class=\"nx\">posts</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>We can add a promise chain in this closure for repetitive logic. For example, parseing the response from JSON to an object:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code>\n<span class=\"kd\">function</span> <span class=\"k\">async</span> <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span><span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">){</span>\n    <span class=\"c1\">// Get posts</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">posts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span> <span class=\"s2\">`https://site.com/wp-json/wp/v2/posts?page=</span><span class=\"p\">${</span><span class=\"nx\">page</span><span class=\"p\">}</span><span class=\"s2\">`</span> <span class=\"p\">)</span>\n    <span class=\"c1\">//Then parse</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span> <span class=\"nx\">r</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()</span> <span class=\"p\">);</span>\n    <span class=\"c1\">// Then return object</span>\n    <span class=\"k\">return</span> <span class=\"nx\">posts</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>This example is probably more useful then the first one. This pattern is useful when we want to consume this function in a closure that can <strong>not</strong> be async. For example:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useEffect</span><span class=\"p\">(</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//Fetch posts, THEN update state</span>\n    <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">posts</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setPosts</span><span class=\"p\">(</span><span class=\"nx\">posts</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n<span class=\"p\">},[</span><span class=\"nx\">page</span><span class=\"p\">]);</span>\n</code></pre></div>\n\n\n\n<p>Keep in mind, this is a function that returns a promise to make an API request. Not a function that makes an API request. That means that calling <code>then()</code> triggers the request. Another way to do it is to use <code>Promise.all()</code><br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">//Get page 1 and page 2 of posts:</span>\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">([</span> <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">]</span> <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span> <span class=\"nx\">posts</span>  <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">page1</span> <span class=\"o\">=</span> <span class=\"nx\">posts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">page2</span> <span class=\"o\">=</span> <span class=\"nx\">posts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n\n\n\n<h2>\n  <a name=\"using-the-promise-constructor-inside-an-async-closure\" href=\"#using-the-promise-constructor-inside-an-async-closure\" class=\"anchor\">\n  </a>\n  Using The Promise Constructor Inside An Async Closure\n</h2>\n\n<p>The other way to return a promise from a function is to instantiate a promise object, and return it. This lets us manually call the resolve and reject functions.</p>\n\n<p>We can use this to add a caching layer to our <code>fetchPosts()</code> function. The function can resolve immediately, if the page of posts is in the cache:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"kd\">function</span> <span class=\"k\">async</span> <span class=\"nx\">fetchPosts</span><span class=\"p\">(</span><span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">){</span>\n   <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span> <span class=\"nx\">asnyc</span> <span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n       <span class=\"c1\">//Is post in cache?</span>\n       <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span> <span class=\"nx\">page</span><span class=\"p\">)</span> <span class=\"p\">){</span>\n           <span class=\"c1\">//Resolve from cache right away</span>\n           <span class=\"nx\">resolve</span><span class=\"p\">(</span> <span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">page</span> <span class=\"p\">);</span>\n       <span class=\"p\">}</span> \n       <span class=\"c1\">//Make request</span>\n       <span class=\"kd\">const</span> <span class=\"nx\">posts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span> <span class=\"s2\">`https://site.com/wp-json/wp/v2/posts?page=</span><span class=\"p\">${</span><span class=\"nx\">page</span><span class=\"p\">}</span><span class=\"s2\">`</span> <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span> <span class=\"nx\">r</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()</span> <span class=\"p\">);</span>\n       <span class=\"c1\">//cache for next call.</span>\n       <span class=\"nx\">cache</span><span class=\"p\">[</span> <span class=\"nx\">page</span> <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">posts</span><span class=\"p\">;</span>\n       <span class=\"c1\">//now resolve</span>\n       <span class=\"nx\">resolve</span><span class=\"p\">(</span> <span class=\"nx\">posts</span> <span class=\"p\">);</span>\n   <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</code></pre></div>\n\n\n\n<h2>\n  <a name=\"i-promise-this-is-useful\" href=\"#i-promise-this-is-useful\" class=\"anchor\">\n  </a>\n  I Promise This Is Useful\n</h2>\n\n<p>In this post, I showed how to return a promise from an asynchronous JavaScript function. </p>\n\n<p>I find this to be a useful pattern when abstracting API calls from UI or other business logic. What I like is that it leaves the responsibility of <strong>when</strong> to call the function to the module consuming it.</p>\n\n<p><em>Featured Image: Photo by <a href=\"https://unsplash.com/@senga1?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Agnes Gospodinova</a> on Unsplash</em></p>\n\n","body_markdown":"\n\nOne JavaScript feature that has tripped me up a bit recently is the difference between a function that returns a promise and a function that returns the value of that the promise resolves. Decoupling data fetching helps with server-side rendered apps and can also make mocking a remote API in tests easier. In my case, I wanted to use the same functions for getting data into a static file generator as I used in the React client.\n\nIn the past, I always wanted to return the result of the API call. The more that I understand the subtle difference between returning a promise and returning the result of the the promise, the more I prefer to return a promise. In this post, I will show to return a promise from an asynchronous function, with and without explicitly creating a Promise object with the new keyword. More importantly, I'll cover when and why this pattern is useful when working with remote APIs.\n\nThis is a quick post and I assume you are somewhat familiar with using async and await in JavaScript. I wrote in more detail about that [here](https://joshpress.net/two-rules-of-javascript-async-await/).\n\n\n## What Is A Promise?\n\n\nIf you are not familiar with promises, I recommend reading [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) first. A useful definition for this article, would be to say it's a function that promises to do something and **then** let's you do something with it.\n\n\nThe kinds of functions we're talking about are considered \"thenable\". We are able to call the function \"then()\" on there results.\n\nFetch is an example of a \"thenable\". This example makes a remote HTTP request and then console.logs the response.\n\n```js\nfetch(url).then(r => console.log(r) )\n```\n\n## Returning A Promise From A Function\n\n\nThere are a few ways to return a promise from a function. One way is to use an async closure that returns a thenable function. This example gets a page of posts from a WordPress site:\n\n```js\n\nfunction async fetchPosts(page = 1){\n    // Await fetch of posts\n    const posts = await fetch( `https://site.com/wp-json/wp/v2/posts?page=${page}` )\n    // Return posts\n    return posts;\n}\n```\n\nWe can add a promise chain in this closure for repetitive logic. For example, parseing the response from JSON to an object:\n\n```js\n\nfunction async fetchPosts(page = 1){\n    // Get posts\n    const posts = await fetch( `https://site.com/wp-json/wp/v2/posts?page=${page}` )\n    //Then parse\n    .then( r => r.json() );\n    // Then return object\n    return posts;\n}\n```\n\nThis example is probably more useful then the first one. This pattern is useful when we want to consume this function in a closure that can **not** be async. For example:\n\n```jsx\nReact.useEffect( () => {\n    //Fetch posts, THEN update state\n    fetchPosts(page).then(posts => setPosts(posts) );\n},[page]);\n```\n\nKeep in mind, this is a function that returns a promise to make an API request. Not a function that makes an API request. That means that calling `then()` triggers the request. Another way to do it is to use `Promise.all()`\n\n```js\n//Get page 1 and page 2 of posts:\nPromise.all([ fetchPosts(1), fetchPosts(2) ] ).then( posts  => {\n  const page1 = posts[0];\n  const page2 = posts[1];\n});\n```\n\n## Using The Promise Constructor Inside An Async Closure\n\nThe other way to return a promise from a function is to instantiate a promise object, and return it. This lets us manually call the resolve and reject functions.\n\nWe can use this to add a caching layer to our `fetchPosts()` function. The function can resolve immediately, if the page of posts is in the cache:\n\n```js\nlet cache = {};\nfunction async fetchPosts(page = 1){\n   return new Promise( asnyc (resolve, reject) => {\n       //Is post in cache?\n       if (cache.hasOwnProperty( page) ){\n           //Resolve from cache right away\n           resolve( cache.page );\n       } \n       //Make request\n       const posts = await fetch( `https://site.com/wp-json/wp/v2/posts?page=${page}` ).then( r => r.json() );\n       //cache for next call.\n       cache[ page ] = posts;\n       //now resolve\n       resolve( posts );\n   });\n});\n   \n```\n\n## I Promise This Is Useful\n\nIn this post, I showed how to return a promise from an asynchronous JavaScript function. \n\nI find this to be a useful pattern when abstracting API calls from UI or other business logic. What I like is that it leaves the responsibility of **when** to call the function to the module consuming it.\n\n\n*Featured Image: Photo by [Agnes Gospodinova](https://unsplash.com/@senga1?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on Unsplash*","user":{"name":"Josh Pollock","username":"shelob9","twitter_username":"Josh412","github_username":"Shelob9","website_url":"https://JoshPress.net","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--0WBb8dNZ--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--8WFtOwoJ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63421/1ce6f212-f8bc-417a-b61e-92a6743899dd.jpg"},"organization":{"name":"Saturday Drive","username":"saturday-drive","slug":"saturday-drive","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--tbPWzF1m--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1799/e3556db4-790a-4bee-9cd0-5ab5cefec686.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--0cKDcR6A--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1799/e3556db4-790a-4bee-9cd0-5ab5cefec686.png"}}